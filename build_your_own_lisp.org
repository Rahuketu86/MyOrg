#+TITLE:  Build Your Own Lisp Tutorial
#+AUTHOR: RAHUL SARAF
#+EMAIL:  rahuketu86@gmail.com
#+TODO:   TODO IN-PROGRESS WAITING DEFFERED DONE
#+OPTIONS: H:3 num:2
#+OPTIONS: toc:2
#+OPTIONS: p:t

* Introduction
  This is an exercise in learning multiple things. The objective is manifold :-
  - Learning Org Mode
  - Principles of Literate Programming
  - Learning C
  - Learning a way to implement a new language
  - Learning Lisp
  - And in doing all this - Learning Emacs :)
  
  Long term Goal include:-
  - Learning a method to implement extensible software and organization of software project
  - May be someday an editor like Emacs in Rust/Haskell

  So Stage has been set. Lets' get the ball rolling ...

* Setup
  I will be following the wonderful tutorial at [[http://www.buildyourownlisp.com][buildyourownlisp.com]] . The basic idea would be to 
  write some code following the tutorial in literate mode and add some accompanying notes :-
  - Learnings :: Things that I have learned.
  - Questions :: Any questions I have.
  - Ideas  :: Some Ideas and thoughts for the future. 
	    
* Code
  The idea is to develop a lisp system which can run in both linux and windows. I will be developing this
  on Ubuntu Machine. So my toolset is going to be :-
  - Compiler
    - Clang and/or gcc for linux

      #+begin_src sh :results verbatim :exports both
        gcc --version
      #+end_src

      #+RESULTS:
      : gcc (Ubuntu 5.3.1-14ubuntu2) 5.3.1 20160413
      : Copyright (C) 2015 Free Software Foundation, Inc.
      : This is free software; see the source for copying conditions.  There is NO
      : warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
      : 

      #+begin_src sh :results verbatim :exports both
        clang --version

      #+end_src

      #+RESULTS:
      : clang version 3.3 (tags/RELEASE_33/final)
      : Target: i386-pc-linux-gnu
      : Thread model: posix

    - mingw-gcc and wine for windows
      
      #+begin_src sh :results verbatim :exports both
        i686-w64-mingw32-gcc --version
      #+end_src

      #+RESULTS:
      : i686-w64-mingw32-gcc (GCC) 5.3.1 20160211
      : Copyright (C) 2015 Free Software Foundation, Inc.
      : This is free software; see the source for copying conditions.  There is NO
      : warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
      : 

  - Debugger
    - LLDB/ GDB (Need to figure out setup for emacs)
    - Valgrind
  - Editor
    - Emacs Ofcourse! (Might spend some time in setting up configuration for C development)


** Baby First Steps

   The ubiquituos Hello World
   #+begin_src C :tangle byol/hello_world.c :results verbatim :exports both
     #include <stdio.h>

     int main(int argc, char** argv){
       puts("Hello, World from Org and C!");
       return 0;
     }
   #+end_src 

   #+RESULTS:
   : Hello, World from Org and C!

*** Learnings
    - It seems like org mode is already hooked to gcc so no need to setup a seperate compiler for now.
    - Always set :results verbatim.
    - Github org-mode support is preety basic and doesn't support TOC, Section numbering
    - /#+OPTIONS/ flag for supporting various export settings
*** Questions
    - There is no executable. Where is the path for tmp executable?
    - What will happen when you have a prompt like infinite loop?
    - Which compiler is being used?
    - How can I add a cell number to source blocks? Something like In[num], Out[num]
    - Some custom formatting for Result and src block for different languages during export?
    - How can I setup flag / org-mode setting to evaluate all source blocks during export to html?
*** Ideas
    - Write a lisp function to use llvm instead of gcc(or vice versa)
    - Function should also provide information about size of executable.
    - Learn some gdb and lldb. Can't think of a way to do it in Org mode
      as of now?
